
; Node ((name . name) (type . type) (in-arc) (out-arc))
; Arc ((type . type) (from ...) (to ...))

;((name . Roxane) (type . individu) (in-arc) (out-arc))
;((name . Christien) (type . individu) (in-arc) (out-arc))

(setq nodes '())
(setq arcs '())

(defun defnode (name type)
	(let ((N (gentemp "N")))
		(set N (list (cons 'name name) (cons 'type type)))
		(push N nodes)
		N
	)
)

(defun defarc (type from to)
	(if (and (member from nodes) (member to nodes))
		 (let ((A (gentemp "A")))
		   	(set A (list (cons 'type type) (cons 'from from) (cons 'to to)))
		 	(push A arcs) 
			A
		 )
		 (error "No such element")
        )
)

(defun get_prop_val (id prop)
	(cdr (assoc prop (symbol-value id)))
)

(defun set_prop_val (id prop value)
	(setf (cdr (assoc prop (symbol-value id))) value)
	;(let ((paire (assoc prop (symbol-value id))))
	;	(set id (cons (cons prop value)
	;		(remove paire (symbol-value id) :test #'equal)))
	;)
)

(defun add_prop_val (id prop val)
	(let ((pair (assoc prop (symbol-value id))))
		(if pair
			(set_prop_val id prop val)
			;??? (set_prop_val id prop (cons val (cdr pair)))
			(push (cons prop val) (symbol-value id))
		)
	)
)

(print (defnode '1 'individu))
(print (defnode '2 'individu))
(print (defnode '3 'individu))
(print (defnode 'la-ji 'individu))
(print (defnode '5 'individu))
(print (eval (defarc 'is-a 'N1 'N5)))
(print (eval (defarc 'is-a 'N2 'N5)))
(print (eval (defarc 'is-a 'N3 'N5)))
;(print (get_prop_val 'N4 'name))
;(print (set_prop_val 'N4 'name 'le-se))
;(print (symbol-value 'N4)) 
;(print (get_prop_val 'N4 'name))
(print (add_prop_val 'N4 'test 'abc))
(print (symbol-value 'N4))
(print (add_prop_val 'N4 'test 'bcd))
(print (symbol-value 'N4))
